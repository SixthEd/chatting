[33m[nodemon] 3.1.4[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,cjs,json[39m
[32m[nodemon] starting `node index.js`[39m
Server is running on 4000
{
  rows: [ { id: 1, name: 'Rohan' }, { id: 5, name: 'Pawan' } ],
  name: 'Pragyan'
}
{
  rows: [ { id: 1, name: 'Rohan' }, { id: 5, name: 'Pawan' } ],
  name: 'Pragyan'
}
{
  rows: [ { id: 1, name: 'Rohan' }, { id: 5, name: 'Pawan' } ],
  name: 'Pragyan'
}
{
  rows: [ { id: 1, name: 'Rohan' }, { id: 5, name: 'Pawan' } ],
  name: 'Pragyan'
}
{ type: 6, password: '+{or<+h;[3S~Dym!', id: 2 }
<ref *1> WebSocket {
  _events: [Object: null prototype] {
    close: [ [Function (anonymous)], [Function (anonymous)] ],
    message: [Function (anonymous)]
  },
  _eventsCount: 2,
  _maxListeners: undefined,
  _binaryType: 'nodebuffer',
  _closeCode: 1001,
  _closeFrameReceived: true,
  _closeFrameSent: true,
  _closeMessage: Buffer(0) [Uint8Array] [],
  _closeTimer: Timeout {
    _idleTimeout: -1,
    _idlePrev: null,
    _idleNext: null,
    _idleStart: 41134,
    _onTimeout: null,
    _timerArgs: undefined,
    _repeat: null,
    _destroyed: true,
    [Symbol(refed)]: true,
    [Symbol(kHasPrimitive)]: false,
    [Symbol(asyncId)]: 165,
    [Symbol(triggerId)]: 154
  },
  _errorEmitted: false,
  _extensions: {},
  _paused: false,
  _protocol: '',
  _readyState: 3,
  _receiver: Receiver {
    _events: [Object: null prototype] {},
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 1091466620,
      [Symbol(kBufferedValue)]: null,
      [Symbol(kWriteCbValue)]: null
    },
    _maxListeners: undefined,
    _allowSynchronousEvents: true,
    _binaryType: 'nodebuffer',
    _extensions: {},
    _isServer: true,
    _maxPayload: 104857600,
    _skipUTF8Validation: false,
    _bufferedBytes: 0,
    _buffers: [],
    _compressed: false,
    _payloadLength: 2,
    _mask: Buffer(4) [Uint8Array] [ 241, 188, 39, 184 ],
    _fragmented: 0,
    _masked: true,
    _fin: true,
    _opcode: 8,
    _totalPayloadLength: 0,
    _messageLength: 0,
    _fragments: [],
    _errored: false,
    _loop: false,
    _state: 0,
    _eventsCount: 0,
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(websocket)]: [Circular *1]
  },
  _sender: Sender {
    _extensions: {},
    _socket: <ref *5> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: {
        close: [
          [Function: bound socketOnClose],
          [Function: onServerResponseClose]
        ],
        error: [ [Function: socketOnError], [Function: socketOnError] ],
        prefinish: undefined,
        finish: undefined,
        drain: [Function: bound socketOnDrain],
        data: [Function: bound socketOnData],
        end: [
          [Function: onReadableStreamEnd],
          [Function: bound socketOnEnd]
        ],
        readable: undefined,
        timeout: [Function: socketOnTimeout],
        resume: undefined,
        pause: undefined
      },
      _readableState: ReadableState {
        highWaterMark: 16384,
        buffer: [],
        bufferIndex: 0,
        length: 0,
        pipes: [],
        awaitDrainWriters: null,
        [Symbol(kState)]: 194512756
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 1091450228,
        [Symbol(kBufferedValue)]: null,
        [Symbol(kWriteCbValue)]: null,
        [Symbol(kAfterWriteTickInfoValue)]: null
      },
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 6,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: <ref *3> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        requestTimeout: 300000,
        headersTimeout: 60000,
        keepAliveTimeout: 5000,
        connectionsCheckingInterval: 30000,
        requireHostHeader: true,
        joinDuplicateHeaders: undefined,
        rejectNonStandardBodyWrites: false,
        _events: [Object: null prototype] {
          request: <ref *2> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *2] },
            response: ServerResponse { app: [Circular *2] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/berserker/Downloads/nodeP/backend/views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: '/home/berserker/Downloads/nodeP/backend/views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: cors],
                  name: 'cors',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: cookieParser],
                  name: 'cookieParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/register\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/register',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/login\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/login',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/logout\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/logout',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/cookie\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/cookie',
                          stack: [
                            Layer {
                              handle: [Function: verifyRefreshToken],
                              name: 'verifyRefreshToken',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/ws\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/ws',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/wsroom',
                        keys: [],
                        regexp: /^\/wsroom\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/wsroom',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getFriends',
                        keys: [],
                        regexp: /^\/getFriends\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getFriends',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/updatechat\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/updatechat',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'put'
                            }
                          ],
                          methods: { put: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/chat\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/chat',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener],
          listening: [Function: setupConnectionsTracking]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *3]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        _listeningId: 2,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: true,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        highWaterMark: 16384,
        httpAllowHalfOpen: false,
        timeout: 0,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        _connectionKey: '6::::4000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 25,
        [Symbol(kUniqueHeaders)]: null,
        [Symbol(http.server.connections)]: ConnectionsList {},
        [Symbol(http.server.connectionsCheckingInterval)]: <ref *4> Timeout {
          _idleTimeout: 30000,
          _idlePrev: TimersList {
            _idleNext: [Circular *4],
            _idlePrev: [Circular *4],
            expiry: 60365,
            id: -9007199254740985,
            msecs: 30000,
            priorityQueuePosition: 1
          },
          _idleNext: TimersList {
            _idleNext: [Circular *4],
            _idlePrev: [Circular *4],
            expiry: 60365,
            id: -9007199254740985,
            msecs: 30000,
            priorityQueuePosition: 1
          },
          _idleStart: 30365,
          _onTimeout: [Function: bound checkConnections],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 27,
          [Symbol(triggerId)]: 26
        }
      },
      _server: <ref *3> Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        requestTimeout: 300000,
        headersTimeout: 60000,
        keepAliveTimeout: 5000,
        connectionsCheckingInterval: 30000,
        requireHostHeader: true,
        joinDuplicateHeaders: undefined,
        rejectNonStandardBodyWrites: false,
        _events: [Object: null prototype] {
          request: <ref *2> [Function: app] {
            _events: [Object: null prototype] { mount: [Function: onmount] },
            _eventsCount: 1,
            _maxListeners: undefined,
            setMaxListeners: [Function: setMaxListeners],
            getMaxListeners: [Function: getMaxListeners],
            emit: [Function: emit],
            addListener: [Function: addListener],
            on: [Function: addListener],
            prependListener: [Function: prependListener],
            once: [Function: once],
            prependOnceListener: [Function: prependOnceListener],
            removeListener: [Function: removeListener],
            off: [Function: removeListener],
            removeAllListeners: [Function: removeAllListeners],
            listeners: [Function: listeners],
            rawListeners: [Function: rawListeners],
            listenerCount: [Function: listenerCount],
            eventNames: [Function: eventNames],
            init: [Function: init],
            defaultConfiguration: [Function: defaultConfiguration],
            lazyrouter: [Function: lazyrouter],
            handle: [Function: handle],
            use: [Function: use],
            route: [Function: route],
            engine: [Function: engine],
            param: [Function: param],
            set: [Function: set],
            path: [Function: path],
            enabled: [Function: enabled],
            disabled: [Function: disabled],
            enable: [Function: enable],
            disable: [Function: disable],
            acl: [Function (anonymous)],
            bind: [Function (anonymous)],
            checkout: [Function (anonymous)],
            connect: [Function (anonymous)],
            copy: [Function (anonymous)],
            delete: [Function (anonymous)],
            get: [Function (anonymous)],
            head: [Function (anonymous)],
            link: [Function (anonymous)],
            lock: [Function (anonymous)],
            'm-search': [Function (anonymous)],
            merge: [Function (anonymous)],
            mkactivity: [Function (anonymous)],
            mkcalendar: [Function (anonymous)],
            mkcol: [Function (anonymous)],
            move: [Function (anonymous)],
            notify: [Function (anonymous)],
            options: [Function (anonymous)],
            patch: [Function (anonymous)],
            post: [Function (anonymous)],
            propfind: [Function (anonymous)],
            proppatch: [Function (anonymous)],
            purge: [Function (anonymous)],
            put: [Function (anonymous)],
            rebind: [Function (anonymous)],
            report: [Function (anonymous)],
            search: [Function (anonymous)],
            source: [Function (anonymous)],
            subscribe: [Function (anonymous)],
            trace: [Function (anonymous)],
            unbind: [Function (anonymous)],
            unlink: [Function (anonymous)],
            unlock: [Function (anonymous)],
            unsubscribe: [Function (anonymous)],
            all: [Function: all],
            del: [Function (anonymous)],
            render: [Function: render],
            listen: [Function: listen],
            request: IncomingMessage { app: [Circular *2] },
            response: ServerResponse { app: [Circular *2] },
            cache: {},
            engines: {},
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/berserker/Downloads/nodeP/backend/views',
              'jsonp callback name': 'callback'
            },
            locals: [Object: null prototype] {
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: '/home/berserker/Downloads/nodeP/backend/views',
                'jsonp callback name': 'callback'
              }
            },
            mountpath: '/',
            _router: [Function: router] {
              params: {},
              _params: [],
              caseSensitive: false,
              mergeParams: undefined,
              strict: false,
              stack: [
                Layer {
                  handle: [Function: query],
                  name: 'query',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: expressInit],
                  name: 'expressInit',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: cors],
                  name: 'cors',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: jsonParser],
                  name: 'jsonParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: cookieParser],
                  name: 'cookieParser',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                },
                Layer {
                  handle: [Function: router] {
                    params: {},
                    _params: [],
                    caseSensitive: undefined,
                    mergeParams: undefined,
                    strict: undefined,
                    stack: [
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/register\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/register',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/login\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/login',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/logout\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/logout',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/cookie\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/cookie',
                          stack: [
                            Layer {
                              handle: [Function: verifyRefreshToken],
                              name: 'verifyRefreshToken',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            },
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/ws\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/ws',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/wsroom',
                        keys: [],
                        regexp: /^\/wsroom\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/wsroom',
                          stack: [
                            Layer {
                              handle: [Function (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'get'
                            }
                          ],
                          methods: { get: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: {},
                        path: '/getFriends',
                        keys: [],
                        regexp: /^\/getFriends\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/getFriends',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/updatechat\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/updatechat',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'put'
                            }
                          ],
                          methods: { put: true }
                        }
                      },
                      Layer {
                        handle: [Function: bound dispatch],
                        name: 'bound dispatch',
                        params: undefined,
                        path: undefined,
                        keys: [],
                        regexp: /^\/chat\/?$/i {
                          fast_star: false,
                          fast_slash: false
                        },
                        route: Route {
                          path: '/chat',
                          stack: [
                            Layer {
                              handle: [AsyncFunction (anonymous)],
                              name: '<anonymous>',
                              params: undefined,
                              path: undefined,
                              keys: [],
                              regexp: /^\/?$/i {
                                fast_star: false,
                                fast_slash: false
                              },
                              method: 'post'
                            }
                          ],
                          methods: { post: true }
                        }
                      }
                    ]
                  },
                  name: 'router',
                  params: {},
                  path: '',
                  keys: [],
                  regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                  route: undefined
                }
              ]
            }
          },
          connection: [Function: connectionListener],
          listening: [Function: setupConnectionsTracking]
        },
        _eventsCount: 3,
        _maxListeners: undefined,
        _connections: 1,
        _handle: TCP {
          reading: false,
          onconnection: [Function: onconnection],
          [Symbol(owner_symbol)]: [Circular *3]
        },
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        _listeningId: 2,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: true,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        highWaterMark: 16384,
        httpAllowHalfOpen: false,
        timeout: 0,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        _connectionKey: '6::::4000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 25,
        [Symbol(kUniqueHeaders)]: null,
        [Symbol(http.server.connections)]: ConnectionsList {},
        [Symbol(http.server.connectionsCheckingInterval)]: <ref *4> Timeout {
          _idleTimeout: 30000,
          _idlePrev: TimersList {
            _idleNext: [Circular *4],
            _idlePrev: [Circular *4],
            expiry: 60365,
            id: -9007199254740985,
            msecs: 30000,
            priorityQueuePosition: 1
          },
          _idleNext: TimersList {
            _idleNext: [Circular *4],
            _idlePrev: [Circular *4],
            expiry: 60365,
            id: -9007199254740985,
            msecs: 30000,
            priorityQueuePosition: 1
          },
          _idleStart: 30365,
          _onTimeout: [Function: bound checkConnections],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 27,
          [Symbol(triggerId)]: 26
        }
      },
      parser: null,
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: <ref *6> ServerResponse {
        _events: [Object: null prototype] {
          finish: [Function: bound resOnFinish]
        },
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        strictContentLength: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        _closed: true,
        socket: [Circular *5],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        req: IncomingMessage {
          _events: {
            close: undefined,
            error: undefined,
            data: undefined,
            end: undefined,
            readable: undefined
          },
          _readableState: ReadableState {
            highWaterMark: 16384,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 1315740,
            [Symbol(kErroredValue)]: Error: aborted
                at abortIncoming (node:_http_server:797:17)
                at socketOnClose (node:_http_server:791:3)
                at Socket.emit (node:events:531:35)
                at TCP.<anonymous> (node:net:339:12) {
              code: 'ECONNRESET'
            }
          },
          _maxListeners: undefined,
          socket: [Circular *5],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          rawHeaders: [
            'Host',
            'localhost:4000',
            'Connection',
            'Upgrade',
            'Pragma',
            'no-cache',
            'Cache-Control',
            'no-cache',
            'User-Agent',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
            'Accept-Language',
            'en-US,en;q=0.7',
            'Upgrade',
            'websocket',
            'Origin',
            'http://localhost:3000',
            'Sec-WebSocket-Version',
            '13',
            'Accept-Encoding',
            'gzip, deflate, br, zstd',
            'Sec-WebSocket-Key',
            'T1sLtTGveMKnyEnl41dXVQ==',
            'Sec-WebSocket-Extensions',
            'permessage-deflate; client_max_window_bits'
          ],
          rawTrailers: [],
          joinDuplicateHeaders: null,
          aborted: true,
          upgrade: false,
          url: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Circular *5],
          _consuming: false,
          _dumped: false,
          next: [Function: next],
          baseUrl: '',
          originalUrl: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
          _parsedUrl: Url {
            protocol: null,
            slashes: null,
            auth: null,
            host: null,
            port: null,
            hostname: null,
            hash: null,
            search: '?id=2&password=+{or%3C+h;[3S~Dym!',
            query: 'id=2&password=+{or%3C+h;[3S~Dym!',
            pathname: '/wsroom',
            path: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
            href: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
            _raw: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!'
          },
          params: {},
          query: { id: '2', password: ' {or< h;[3S~Dym!' },
          res: [Circular *6],
          body: {},
          secret: undefined,
          cookies: [Object: null prototype] {},
          signedCookies: [Object: null prototype] {},
          route: Route {
            path: '/wsroom',
            stack: [
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?$/i { fast_star: false, fast_slash: false },
                method: 'get'
              }
            ],
            methods: { get: true }
          },
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kHeaders)]: {
            host: 'localhost:4000',
            connection: 'Upgrade',
            pragma: 'no-cache',
            'cache-control': 'no-cache',
            'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
            'accept-language': 'en-US,en;q=0.7',
            upgrade: 'websocket',
            origin: 'http://localhost:3000',
            'sec-websocket-version': '13',
            'accept-encoding': 'gzip, deflate, br, zstd',
            'sec-websocket-key': 'T1sLtTGveMKnyEnl41dXVQ==',
            'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits'
          },
          [Symbol(kHeadersCount)]: 24,
          [Symbol(kTrailers)]: null,
          [Symbol(kTrailersCount)]: 0
        },
        _sent100: false,
        _expect_continue: false,
        _maxRequestsPerSocket: 0,
        locals: [Object: null prototype] {},
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype] {
          'x-powered-by': [ 'X-Powered-By', 'Express' ],
          'access-control-allow-headers': [
            'Access-Control-Allow-Headers',
            'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'
          ],
          'access-control-allow-origin': [ 'Access-Control-Allow-Origin', 'http://localhost:3000' ],
          'access-control-allow-methods': [
            'Access-Control-Allow-Methods',
            'GET,PUT,POST,DELETE,OPTIONS'
          ],
          'access-control-allow-credentials': [ 'Access-Control-Allow-Credentials', 'true' ]
        },
        [Symbol(errored)]: null,
        [Symbol(kHighWaterMark)]: 16384,
        [Symbol(kRejectNonStandardBodyWrites)]: false,
        [Symbol(kUniqueHeaders)]: null
      },
      timeout: 0,
      [Symbol(async_id_symbol)]: 154,
      [Symbol(kHandle)]: null,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 587,
      [Symbol(kBytesWritten)]: 166,
      [Symbol(websocket)]: undefined
    },
    _firstFragment: true,
    _compress: false,
    _bufferedBytes: 0,
    _queue: [],
    _state: 0,
    onerror: [Function: senderOnError],
    [Symbol(websocket)]: [Circular *1]
  },
  _socket: <ref *5> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [
        [Function: bound socketOnClose],
        [Function: onServerResponseClose]
      ],
      error: [ [Function: socketOnError], [Function: socketOnError] ],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: undefined,
      pause: undefined
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 194512756
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 1091450228,
      [Symbol(kBufferedValue)]: null,
      [Symbol(kWriteCbValue)]: null,
      [Symbol(kAfterWriteTickInfoValue)]: null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 6,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *3> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: <ref *2> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *2] },
          response: ServerResponse { app: [Circular *2] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: '/home/berserker/Downloads/nodeP/backend/views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/berserker/Downloads/nodeP/backend/views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: cors],
                name: 'cors',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: cookieParser],
                name: 'cookieParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/register\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/register',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/login\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/login',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/logout\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/logout',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/cookie\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/cookie',
                        stack: [
                          Layer {
                            handle: [Function: verifyRefreshToken],
                            name: 'verifyRefreshToken',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/ws\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/ws',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/wsroom',
                      keys: [],
                      regexp: /^\/wsroom\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/wsroom',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/getFriends',
                      keys: [],
                      regexp: /^\/getFriends\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getFriends',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/updatechat\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/updatechat',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'put'
                          }
                        ],
                        methods: { put: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/chat\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/chat',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener],
        listening: [Function: setupConnectionsTracking]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *3]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::4000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 25,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: <ref *4> Timeout {
        _idleTimeout: 30000,
        _idlePrev: TimersList {
          _idleNext: [Circular *4],
          _idlePrev: [Circular *4],
          expiry: 60365,
          id: -9007199254740985,
          msecs: 30000,
          priorityQueuePosition: 1
        },
        _idleNext: TimersList {
          _idleNext: [Circular *4],
          _idlePrev: [Circular *4],
          expiry: 60365,
          id: -9007199254740985,
          msecs: 30000,
          priorityQueuePosition: 1
        },
        _idleStart: 30365,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 27,
        [Symbol(triggerId)]: 26
      }
    },
    _server: <ref *3> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype] {
        request: <ref *2> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *2] },
          response: ServerResponse { app: [Circular *2] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: '/home/berserker/Downloads/nodeP/backend/views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: '/home/berserker/Downloads/nodeP/backend/views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: cors],
                name: 'cors',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: cookieParser],
                name: 'cookieParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/register\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/register',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/login\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/login',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/logout\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/logout',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/cookie\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/cookie',
                        stack: [
                          Layer {
                            handle: [Function: verifyRefreshToken],
                            name: 'verifyRefreshToken',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          },
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/ws\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/ws',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/wsroom',
                      keys: [],
                      regexp: /^\/wsroom\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/wsroom',
                        stack: [
                          Layer {
                            handle: [Function (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'get'
                          }
                        ],
                        methods: { get: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: {},
                      path: '/getFriends',
                      keys: [],
                      regexp: /^\/getFriends\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/getFriends',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/updatechat\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/updatechat',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'put'
                          }
                        ],
                        methods: { put: true }
                      }
                    },
                    Layer {
                      handle: [Function: bound dispatch],
                      name: 'bound dispatch',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/chat\/?$/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: Route {
                        path: '/chat',
                        stack: [
                          Layer {
                            handle: [AsyncFunction (anonymous)],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            method: 'post'
                          }
                        ],
                        methods: { post: true }
                      }
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener],
        listening: [Function: setupConnectionsTracking]
      },
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *3]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::4000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 25,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: <ref *4> Timeout {
        _idleTimeout: 30000,
        _idlePrev: TimersList {
          _idleNext: [Circular *4],
          _idlePrev: [Circular *4],
          expiry: 60365,
          id: -9007199254740985,
          msecs: 30000,
          priorityQueuePosition: 1
        },
        _idleNext: TimersList {
          _idleNext: [Circular *4],
          _idlePrev: [Circular *4],
          expiry: 60365,
          id: -9007199254740985,
          msecs: 30000,
          priorityQueuePosition: 1
        },
        _idleStart: 30365,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 27,
        [Symbol(triggerId)]: 26
      }
    },
    parser: null,
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: <ref *6> ServerResponse {
      _events: [Object: null prototype] {
        finish: [Function: bound resOnFinish]
      },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: true,
      socket: [Circular *5],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: IncomingMessage {
        _events: {
          close: undefined,
          error: undefined,
          data: undefined,
          end: undefined,
          readable: undefined
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 1315740,
          [Symbol(kErroredValue)]: Error: aborted
              at abortIncoming (node:_http_server:797:17)
              at socketOnClose (node:_http_server:791:3)
              at Socket.emit (node:events:531:35)
              at TCP.<anonymous> (node:net:339:12) {
            code: 'ECONNRESET'
          }
        },
        _maxListeners: undefined,
        socket: [Circular *5],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Host',
          'localhost:4000',
          'Connection',
          'Upgrade',
          'Pragma',
          'no-cache',
          'Cache-Control',
          'no-cache',
          'User-Agent',
          'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
          'Accept-Language',
          'en-US,en;q=0.7',
          'Upgrade',
          'websocket',
          'Origin',
          'http://localhost:3000',
          'Sec-WebSocket-Version',
          '13',
          'Accept-Encoding',
          'gzip, deflate, br, zstd',
          'Sec-WebSocket-Key',
          'T1sLtTGveMKnyEnl41dXVQ==',
          'Sec-WebSocket-Extensions',
          'permessage-deflate; client_max_window_bits'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: null,
        aborted: true,
        upgrade: false,
        url: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Circular *5],
        _consuming: false,
        _dumped: false,
        next: [Function: next],
        baseUrl: '',
        originalUrl: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
        _parsedUrl: Url {
          protocol: null,
          slashes: null,
          auth: null,
          host: null,
          port: null,
          hostname: null,
          hash: null,
          search: '?id=2&password=+{or%3C+h;[3S~Dym!',
          query: 'id=2&password=+{or%3C+h;[3S~Dym!',
          pathname: '/wsroom',
          path: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
          href: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!',
          _raw: '/wsroom?id=2&password=+{or%3C+h;[3S~Dym!'
        },
        params: {},
        query: { id: '2', password: ' {or< h;[3S~Dym!' },
        res: [Circular *6],
        body: {},
        secret: undefined,
        cookies: [Object: null prototype] {},
        signedCookies: [Object: null prototype] {},
        route: Route {
          path: '/wsroom',
          stack: [
            Layer {
              handle: [Function (anonymous)],
              name: '<anonymous>',
              params: undefined,
              path: undefined,
              keys: [],
              regexp: /^\/?$/i { fast_star: false, fast_slash: false },
              method: 'get'
            }
          ],
          methods: { get: true }
        },
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          host: 'localhost:4000',
          connection: 'Upgrade',
          pragma: 'no-cache',
          'cache-control': 'no-cache',
          'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
          'accept-language': 'en-US,en;q=0.7',
          upgrade: 'websocket',
          origin: 'http://localhost:3000',
          'sec-websocket-version': '13',
          'accept-encoding': 'gzip, deflate, br, zstd',
          'sec-websocket-key': 'T1sLtTGveMKnyEnl41dXVQ==',
          'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits'
        },
        [Symbol(kHeadersCount)]: 24,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        'x-powered-by': [ 'X-Powered-By', 'Express' ],
        'access-control-allow-headers': [
          'Access-Control-Allow-Headers',
          'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'
        ],
        'access-control-allow-origin': [ 'Access-Control-Allow-Origin', 'http://localhost:3000' ],
        'access-control-allow-methods': [
          'Access-Control-Allow-Methods',
          'GET,PUT,POST,DELETE,OPTIONS'
        ],
        'access-control-allow-credentials': [ 'Access-Control-Allow-Credentials', 'true' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    timeout: 0,
    [Symbol(async_id_symbol)]: 154,
    [Symbol(kHandle)]: null,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 587,
    [Symbol(kBytesWritten)]: 166,
    [Symbol(websocket)]: undefined
  },
  _autoPong: true,
  _isServer: true,
  [Symbol(shapeMode)]: false,
  [Symbol(kCapture)]: false
}
{
  rows: [ { id: 1, name: 'Rohan' }, { id: 5, name: 'Pawan' } ],
  name: 'Pragyan'
}
{
  rows: [ { id: 1, name: 'Rohan' }, { id: 5, name: 'Pawan' } ],
  name: 'Pragyan'
}
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
file:///home/berserker/Downloads/nodeP/backend/routes.js:263
            console.dir(socket.,{depth:null})
                               ^

SyntaxError: Unexpected token ','
    at ModuleLoader.moduleStrategy (node:internal/modules/esm/translators:169:18)
    at callTranslator (node:internal/modules/esm/loader:272:14)
    at ModuleLoader.moduleProvider (node:internal/modules/esm/loader:278:30)

Node.js v20.16.0
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
Server is running on 4000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
Server is running on 4000
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
Server is running on 4000
